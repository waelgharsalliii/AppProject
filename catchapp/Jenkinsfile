pipeline {
    agent any
  environment {
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
            stage('Checkout') {
            steps {
                git branch: 'devlope', url: 'https://github.com/waelgharsalliii/AppProject.git'
            }
        }

         stage('Build Docker Images') {
            steps {
               dir('catchapp'){
                    // Build Docker images using Docker Compose
                    sh 'docker-compose -f docker-compose.yml build'
                }
            }
        }

              stage('Deploy') {
                steps {
                 dir('catchapp'){
                    echo 'Starting Docker Compose services...'
                    // Start Docker Compose services in detached mode
                    sh 'docker-compose -f docker-compose.yml up -d'
                    
                }
            }
        }
                
            stage('Wait for 3 Minutes') {
               steps {
                dir('catchapp') {
                    echo 'Waiting for 5 minutes to allow the services to run...'
                    // Wait for 5 minutes
                    sleep(time: 1, unit: 'MINUTES')
                }
            }
        }

            stage('Verify Backend-Mongo Connectivity') {
                steps {
                    dir('catchapp') {
                        script {
                            // Check connectivity between backend and mongo
                            def result = sh(script: 'docker-compose exec -T backend ping -c 4 mongo', returnStatus: true)
                            if (result != 0) {
                                error "Backend to Mongo connectivity test failed!"
                        }
                    }
                }
            }
        }

            stage('Verify Frontend-Backend Connectivity') {
                        steps {
                            dir('catchapp') {
                                script {
                                    // Check connectivity between frontend and backend
                                    def httpCode = sh(script: 'docker-compose exec -T frontend curl -s -o /dev/null -w "%{http_code}" http://backend:3001', returnStdout: true).trim()
                                    if (httpCode != '200') {
                                        error "Frontend to Backend connectivity test failed! HTTP status code: ${httpCode}"
                        }
                    }
                }
            }
        }

            stage('Teardown') {
              steps {
                dir('catchapp') {
                    echo 'Stopping Docker Compose services...'
                    // Stop and remove Docker Compose services
                    sh 'docker-compose -f docker-compose.yml down'
                }
            }
        }    


    }}
